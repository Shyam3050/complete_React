{"version":3,"file":"static/js/776.f239127e.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetails.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__DOmEj\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__K1ubD\",\"loading\":\"NewCommentForm_loading__dv8wv\",\"control\":\"NewCommentForm_control__ZLKj-\",\"actions\":\"NewCommentForm_actions__Z6Piz\"};","import { useRef, useEffect } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, onAddedComment, error]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n    const enteredText = commentTextRef.current.value;\n\n    // send comment to server\n    sendRequest({\n      commentData: { text: enteredText },\n      quoteId: props.quotesId,\n    });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__eIxnB\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__TSuXG\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  console.log(props)\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport CommentsList from \"./CommentsList\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quotesId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n  console.log(loadedComments);\n\n  useEffect(() => {\n    sendRequest(quotesId);\n  }, [quotesId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quotesId);\n  }, [sendRequest, quotesId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (status === \"completed\" && loadedComments && loadedComments.length === 0) {\n    comments = <p className=\"centered\">NO Comments yet found</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quotesId={quotesId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__IRsOR\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\";\r\nimport { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nconst QuoteDetails = () => {\r\n  const params = useParams();\r\n  const { quotesId } = params;\r\n  \r\n  const match = useRouteMatch();\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quotesId);\r\n  }, [sendRequest, quotesId]);\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n  if (!loadedQuote.text) {\r\n    return <p>No Quote Found</p>;\r\n  }\r\n  return (\r\n    <>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comment\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </>\r\n  );\r\n};\r\nexport default QuoteDetails;\r\n"],"names":["props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","quotesId","className","classes","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","console","log","comments","map","comment","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","author","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"sourceRoot":""}